<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"

	xsi:schemaLocation="http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop.xsd">


	<!-- 定义扫描根路径为com.sparrow，不使用默认的扫描方式 -->
	<context:component-scan base-package="com.mongo"
		use-default-filters="false">
		<!-- <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" 
			/> <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" 
			/> <context:include-filter type="annotation" expression="org.springframework.stereotype.Service" 
			/> <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository" 
			/> -->
	</context:component-scan>


	<!-- AOP -->
	<!-- <aop:aspectj-autoproxy/> -->

	
	


	<!-- <mvc:annotation-driven> <mvc:message-converters register-defaults="true"> 
		<bean class="org.springframework.http.converter.json.GsonHttpMessageConverter" 
		/> </mvc:message-converters> </mvc:annotation-driven> -->

	<!-- <mvc:resources location="/" mapping="/resources/**" /> -->

	<!-- <mvc:default-servlet-handler /> -->

	<!-- Register "global" interceptor beans to apply to all registered HandlerMappings -->
	<!-- <mvc:interceptors> <bean class="org.springframework.web.servlet.theme.ThemeChangeInterceptor" 
		/> <bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" 
		p:paramName="lang" /> </mvc:interceptors> -->

	<!-- Selects a static view for rendering without the need for an explicit 
		controller -->
	<!-- <mvc:view-controller path="/" view-name="index" /> <mvc:view-controller 
		path="/uncaughtException" view-name="/resources/uncaughtException.html" /> 
		<mvc:view-controller path="/resourceNotFound" view-name="/resources/resourceNotFound.html" 
		/> <mvc:view-controller path="/dataAccessFailure" view-name="/resources/dataAccessFailure.html"/> -->



	<!-- Store preferred language configuration in a cookie -->
	<!-- <bean class="org.springframework.web.servlet.i18n.CookieLocaleResolver" 
		id="localeResolver" p:cookieName="locale" /> -->

	<!-- Resolves localized <theme_name>.properties files in the classpath to 
		allow for theme support -->
	<!-- <bean class="org.springframework.ui.context.support.ResourceBundleThemeSource" 
		id="themeSource" /> -->

	<!-- Store preferred theme configuration in a cookie -->
	<!-- <bean class="org.springframework.web.servlet.theme.CookieThemeResolver" 
		id="themeResolver" p:cookieName="theme" p:defaultThemeName="standard" /> -->

	<!-- This bean resolves specific types of exceptions to corresponding logical 
		- view names for error views. The default behaviour of DispatcherServlet 
		- is to propagate all exceptions to the servlet container: this will happen 
		- here with all other types of exceptions. -->
	<!-- <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver" 
		p:defaultErrorView="uncaughtException"> <property name="exceptionMappings"> 
		<props> <prop key=".DataAccessException">dataAccessFailure</prop> <prop key=".NoSuchRequestHandlingMethodException">resourceNotFound</prop> 
		<prop key=".TypeMismatchException">resourceNotFound</prop> <prop key=".MissingServletRequestParameterException">resourceNotFound</prop> 
		</props> </property> </bean> -->

	<!-- Enable this for integration of file upload functionality -->
	<!-- <bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" 
		id="multipartResolver" /> <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"> 
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" 
		/> <property name="prefix" value="/" /> <property name="suffix" value=".jsp" 
		/> <property name="order" value="1" /> </bean> -->

	<!--freemarker -->
	<!-- <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer"> 
		<property name="templateLoaderPath" value="/WEB-INF/ftl/" /> </bean> <bean 
		id="freemarkerViewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver"> 
		<property name="cache" value="true" /> <property name="prefix" value="" /> 
		<property name="suffix" value=".ftl" /> <property name="order" value="0" 
		/> </bean> -->




	<!-- <bean class="org.springframework.web.servlet.view.UrlBasedViewResolver" 
		id="tilesViewResolver"> <property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView" 
		/> </bean> <bean class="org.springframework.web.servlet.view.tiles2.TilesConfigurer" 
		id="tilesConfigurer"> <property name="definitions"> <list> <value>/WEB-INF/layouts/layouts.xml</value> 
		Scan views directory for Tiles configurations <value>/WEB-INF/views/**/views.xml</value> 
		</list> </property> </bean> -->
	<!-- <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer"> 
		<property name="definitions"> <list> <value>/WEB-INF/tiles.xml</value> </list> 
		</property> <property name="preparerFactoryClass" value="org.springframework.web.servlet.view.tiles3.SpringBeanPreparerFactory" 
		/> </bean> <bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver"> 
		<property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"/> 
		</bean> -->

	<!-- <mvc:interceptors> <mvc:interceptor> <mvc:mapping path="/**"/> <bean 
		class="org.wincome.web.interceptor.LogInterceptor" /> </mvc:interceptor> 
		<mvc:interceptor> <mvc:mapping path="/**"/> <mvc:exclude-mapping path="/"/> 
		<bean class="org.wincome.web.interceptor.UserInfoCheckInterceptor" /> </mvc:interceptor> 
		</mvc:interceptors> -->

</beans>
